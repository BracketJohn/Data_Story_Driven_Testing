swagger: '2.0'
info:
  description: These APIs are used to store data in the database.
  version: 1.0.0
  title: Insurence Database
  contact:
    email: placeholder@rwth-aachen.de
  license:
    name: GNU GPL v3
    url: 'https://www.gnu.org/licenses/gpl.txt'
host: localhost
basePath: /v2
tags:
  - name: basicStoryTest
    description: Operations when there is a new test
  - name: contract
    description: Operations about contacts
  - name: customer
    description: Operations about customers
  - name: product
    description: Operations about products
schemes:
  - http
paths:
  /basicStoryTest:
    get:
      tags:
        - basicStoryTest
      summary: Get All Tests which have are from type basicStoryTest
      description: Basically returns all existing tests
      operationId: getAllBasicStoryTests
      produces:
        - application/json
      responses:
        '200':
          description: Returns a list with all tests
        '204':
          description: There are no tests in the database
  '/basicStoryTest/get/{id}':
    get:
      tags:
        - basicStoryTest
      summary: Get A Test by ID
      description: Returns a test by it's ID
      operationId: getBasicStoryTestByID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the basicStoryTest to get
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Sucessful operation. Returns the test with this ID
          schema:
            $ref: '#/definitions/BasicStoryTest'
        '404':
          description: There is no test with this ID
  '/basicStoryTest/get/by-story-name/{storyName}':
    get:
      tags:
        - basicStoryTest
      summary: Get A Test by story name\
      description: Returns all tests for this story
      operationId: getBasicStoryTestByStoryName
      produces:
        - application/json
      parameters:
        - name: storyName
          in: path
          description: The story name for which the tests have to be returned
          required: true
          type: string
      responses:
        '200':
          description: Sucessful operation. Returns the tests for this story
          schema:
            $ref: '#/definitions/BasicStoryTest'
        '404':
          description: There is are no tests for this story
  '/basicStoryTest/get/by-test-name/{testName}':
    get:
      tags:
        - basicStoryTest
      summary: Get A Test by story name
      description: Returns the test with this test name
      operationId: getBasicStoryTestByTestName
      produces:
        - application/json
      parameters:
        - name: testName
          in: path
          description: The testName of the test which has to be returned
          required: true
          type: string
      responses:
        '200':
          description: Sucessful operation. Returns the tests with this name
          schema:
            $ref: '#/definitions/BasicStoryTest'
        '404':
          description: There is are no tests with this name
  /basicStoryTest/insert:
    post:
      tags:
        - basicStoryTest
      summary: Create a new test
      description: Create a new test with basicStoryTest as a storyType
      operationId: createBasicStoryTest
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: The test with the test data that has to be saved in the database
          required: true
          schema:
            $ref: '#/definitions/BasicStoryTest'
      responses:
        '201':
          description: Test saved
        '409':
          description: A test with this test name already exists
  '/basicStoryTest/update/{id}':
    put:
      tags:
        - basicStoryTest
      summary: Update the test with this ID if it exists
      operationId: updateBasicStoryTestByID
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The ID of the test which has to be updated
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: The updated test data
          required: true
          schema:
            $ref: '#/definitions/BasicStoryTest'
      responses:
        '200':
          description: Test succesfully updated
        '400':
          description: Updated test data is null
        '404':
          description: A Test with this id doesn't exist
  '/basicStoryTest/delete/{id}':
    delete:
      tags:
        - basicStoryTest
      summary: Delete the test with this ID if it exists
      operationId: deleteBasicStoryTest
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The ID of the test which has to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Test succesfully deleted
        '404':
          description: A Test with this ID doesn't exist
  /contracts/insert:
    post:
      tags:
        - contract
      summary: Create a contact
      description: >-
        Check in the database if there is a customer who is a policy owner. If
        so don't insert the customer again in the customers table. Save a
        contract in the database.
      operationId: addContract
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Contracts that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Contract'
      responses:
        '201':
          description: Created
        '400':
          description: Invalid contract supplied
        '409':
          description: Contract already exists
  '/contracts/update/{id}':
    put:
      tags:
        - contract
      summary: Update an existing contract
      description: Check if the contract already exists and update it.
      operationId: updateContract
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of contract to update
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Contract that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Contract'
      responses:
        '202':
          description: Contract change accepted
        '400':
          description: Invalid contract supplied
        '404':
          description: Contract not found
  /contracts:
    get:
      tags:
        - contract
      summary: Find all contracts
      description: Find all existing contracts in the database.
      operationId: findAllContracts
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Contract'
        '204':
          description: no contend
  '/contracts/get/{id}':
    get:
      tags:
        - contract
      summary: Find a contract
      description: Check if there is a contact with this id in the database and return it.
      operationId: findContract
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of contract to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Contract'
        '404':
          description: contract not found
  '/contracts/delete/{id}':
    delete:
      tags:
        - contract
      summary: Delete a contract
      description: Find a contract in the database and delete it.
      operationId: deleteContract
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Contract's id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Contract succesfully deleted
        '404':
          description: Contract not found
  /customers/insert:
    post:
      tags:
        - customer
      summary: Create a customer
      description: >-
        Check if the given customer already exists in the customers table of the
        DB. If so, don't insert the customer again in the customers table. Save
        a customer in the database.
      operationId: addCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Customers that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        '201':
          description: Created
        '400':
          description: Invalid customer supplied
        '409':
          description: Conflict - the customer already exists
  '/customers/update/{id}':
    put:
      tags:
        - customer
      summary: Update an existing customer
      description: Check if the customer already exists and update it.
      operationId: updateCustomer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of contract to update
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Customer that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        '202':
          description: Customer change accepted
        '400':
          description: Invalid customer supplied
        '404':
          description: Customer not found
  /customers:
    get:
      tags:
        - customer
      summary: Find all customers
      description: Find all existing customers in the database.
      operationId: findAllCustomers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
        '204':
          description: no content
  '/customers/get/{id}':
    get:
      tags:
        - customer
      summary: Find a customer
      description: >-
        Check if there is a customer with this id in the database and return
        them.
      operationId: findCustomer
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of customer to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Customer'
        '404':
          description: customer not found
  '/customers/by-last-name/{lastName}':
    get:
      tags:
        - customer
      summary: Find a customer by last name
      description: >-
        Check if there is a customer with this last name in the database and
        return them.
      operationId: findCustomerByLastName
      produces:
        - application/json
      parameters:
        - name: lastName
          in: path
          description: Last name of customer to return
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Customer'
  '/customers/{id}/owned-contracts':
    get:
      tags:
        - customer
      summary: Find the contracts owned by a customer
      description: >-
        Check if there is a customer with this id in the database and return the
        contracts they own.
      operationId: findOwnedContracts
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: customer's id
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Contract'
        '404':
          description: Customer Not Found
  '/customers/delete/{id}':
    delete:
      tags:
        - customer
      summary: Delete a customer
      description: Find a customer in the database and delete them.
      operationId: deleteCustomer
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Customer's id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: Customer Not Found
  /products/insert:
    post:
      tags:
        - product
      summary: Create a product
      description: >-
        Check if the product already exists in the database. If so don't insert
        it again. Save a product in the database.
      operationId: addProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Products that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '201':
          description: Product created
        '400':
          description: Invalid product supplied
        '409':
          description: conflict - the product already exists
  '/products/update/{id}':
    put:
      tags:
        - product
      summary: Update an existing product
      description: Check if the product already exists and update it.
      operationId: updateProduct
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of product to update
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          description: Product that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '202':
          description: Product's change accepted
        '400':
          description: Invalid product supplied
        '404':
          description: Product not found
  /products:
    get:
      tags:
        - product
      summary: Find all products
      description: Find all existing products in the database.
      operationId: findAllProducts
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '204':
          description: no contend
  '/products/get/{id}':
    get:
      tags:
        - product
      summary: Find a product
      description: Check if there is a product with this id in the database and return it.
      operationId: findProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        '404':
          description: product not found
  '/products/delete/{id}':
    delete:
      tags:
        - product
      summary: Delete a product
      description: Find a product in the database and delete it.
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Product's id to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
        '404':
          description: Product Not Found
definitions:
  BasicStoryTest:
    type: object
    properties:
      basicStoryTestID:
        type: integer
        format: int64
      storyName:
        type: string
      testName:
        type: string
      data:
        $ref: '#/definitions/BasicStoryTestElement'
  BasicStoryTestElement:
    type: object
    properties:
      basicStoryTestElementID:
        type: integer
        format: int64
      attributes:
        type: array
  Contract:
    type: object
    properties:
      contractID:
        type: integer
        format: int64
      policyOwner:
        $ref: '#/definitions/Customer'
      insuredPerson:
        $ref: '#/definitions/Customer'
      product:
        $ref: '#/definitions/Product'
      monthlyPremium:
        type: number
        example: '200.30'
  Customer:
    type: object
    properties:
      customerID:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
      birthday:
        type: string
        example: 11/02/1981
      address:
        type: string
      job:
        type: string
      ownedContracts:
        type: array
        items:
          $ref: '#/definitions/Contract'
  Product:
    type: object
    properties:
      productID:
        type: integer
        format: int64
      name:
        type: string
      productBegin:
        type: string
        example: 15/06/2017
      productEnd:
        type: string
        example: 15/06/2027
      productType:
        $ref: '#/definitions/ProductType'
  ProductType:
    type: object
    properties:
      productType:
        type: string
        description: types of products
        enum:
          - PROFIT_INSURANCE
          - CONTROL_INSURANCE
          - CAPITAL_INSURANCE
